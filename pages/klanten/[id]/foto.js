import React, { useState, useEffect } from "react"
import Head from 'next/head'
import Image from 'next/image'
import styles from '../../../styles/Home.module.css'
import customers from '../../../styles/Klanten.module.css'
import add from '../../../styles/Add.module.css'

import { GraphQLClient } from 'graphql-request'
import { gql, useMutation } from '@apollo/client';

import { useForm } from "react-hook-form";
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from "yup";
// import { useRouter } from 'next/router'
import { storage } from "../../../firebase/firebase"

const graph = new GraphQLClient(
  "https://godefroy-api.herokuapp.com/"
);

function Fotodetail({ customer }) {

  const customerId = JSON.stringify(customer.id);

  const UPDATE_CUSTOMER = gql`
  mutation updateCustomer (
    $slvName: String, 
    $slvUrl: String, 
    $slvUrlDate: String, 
    $slaName: String, 
    $slaUrl: String, 
    $slaUrlDate: String, 
    $srvName: String, 
    $srvUrl: String, 
    $srvUrlDate: String, 
    $sraName: String, 
    $sraUrl: String, 
    $sraUrlDate: String, 
    ){
    updateCustomer(customerId: ${customerId},
      customer: {
      slvName: $slvName,
      slvUrl: $slvUrl,
      slvUrlDate: $slvUrlDate,
      slaName: $slaName,
      slaUrl: $slaUrl,
      slaUrlDate: $slaUrlDate,
      srvName: $srvName,
      srvUrl: $srvUrl,
      srvUrlDate: $srvUrlDate,
      sraName: $sraName,
      sraUrl: $sraUrl,
      sraUrlDate: $sraUrlDate,
      }){id}
    }
  `;

  const schema = yup.object().shape({
    slvUrl: yup.string(),
    slvName: yup.string(),
    slvUrlDate: yup.string(),
    slaUrl: yup.string(),
    slaName: yup.string(),
    slaUrlDate: yup.string(),
    srvUrl: yup.string(),
    srvName: yup.string(),
    srvUrlDate: yup.string(),
    sraUrl: yup.string(),
    sraName: yup.string(),
    sraUrlDate: yup.string(),
  });

  const { slvName, slvUrl, slvUrlDate, slaName, slaUrl, slaUrlDate, srvName, srvUrl, srvUrlDate, sraName, sraUrl, sraUrlDate } = customer;

  const { register, handleSubmit, formState: { errors } } = useForm({
    resolver: yupResolver(schema)
  });

  const [updateCustomer, { loading: updateCustomerLoading, error: updateCustomerError }] = useMutation(UPDATE_CUSTOMER);

  const handle = (customer) => {
    const customerFormData = {
      ...customer,
    }
    updateCustomer({
      variables: customerFormData
    })
    // router.push('/klanten');
    // location.reload();
  };

  const [admin, setAdmin] = useState();
  useEffect(() => {
    const admin = localStorage.getItem('admin', admin);
    setAdmin(admin);
  }, [admin]);

  const [showLV, setLV] = useState("false");
  const handleToggleLV = () => {
    setLV(!showLV);
  };
  const [showLA, setLA] = useState("false");
  const handleToggleLA = () => {
    setLA(!showLA);
  };
  const [showRV, setRV] = useState("false");
  const handleToggleRV = () => {
    setRV(!showRV);
  };
  const [showRA, setRA] = useState("false");
  const handleToggleRA = () => {
    setRA(!showRA);
  };

  const [file, setFile] = useState(null);
  const [url, setURL] = useState("");

  function handleChange(e) {
    setFile(e.target.files[0]);
  }

  function handleUpload(e) {
    e.preventDefault();
    const ref = storage.ref(`/${customer.name}/${file.name}`);
    const uploadTask = ref.put(file);
    uploadTask.on("state_changed", console.log, console.error, () => {
      ref
        .getDownloadURL()
        .then((url) => {
          setFile(null);
          setURL(url);
        });
    });
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Godefroy Bandenhotel</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.navigation}>
          <div className={styles.logo}>
            <Image src="/godefroy.svg" width='185px' height='55px' />
          </div>
          <div className={styles.links}>
            <a href="/"><p className={styles.link_item}>Overzicht</p></a>
            <a href="/klanten"><p className={styles["link_item"] + " " + styles["active"]}>Klanten</p></a>
            <a href="/login"><p className={styles.link_item}>Admin login</p></a>
            {admin ?
              <a href="/logout"><p className={styles.link_item}>Logout</p></a>
              : ''}
          </div>
        </div>
        <div className={customers.dashboard}>
          <form onSubmit={handleUpload}>
            <div className={customers.header}>
              <div>
                <input className={add.name} defaultValue={customer.name} />
                <input className={add.upload} type="file" onChange={handleChange} />
                <input className={add.urlimg} defaultValue={url} placeholder="copy link" />
              </div>
              <button className={add["submit"] + " " + add["submit_image"]} type="submit">Upload</button>
            </div>
          </form>
          <form onSubmit={handleSubmit(handle)}>
            <div className={add.imagebox}>
              <button className={add.box_clickable} type="submit">Opslaan</button>

              <div>
                <div className={showLV ? add.viewimage : add.hidden}>
                  <img src={slvUrl} />
                  <div className={add.viewimage_date}>
                    <p>Zomer LV</p>
                    <p>{slvUrlDate}</p>
                  </div>
                  <div className={add.viewimage_name}>
                    <p onClick={handleToggleLV}>Edit</p>
                  </div>
                </div>
                <div className={showLV ? add.hidden : add.viewimage}>
                  <div className={add.viewimage_name}>
                    <p onClick={handleToggleLV}>Terug</p>
                  </div>
                  <input {...register("slvName")} className={add.url} defaultValue={slvName} placeholder="Naam" />
                  <input {...register("slvUrl")} className={add.url} defaultValue={slvUrl} placeholder="link afbeelding" />
                  <input {...register("slvUrlDate")} className={add.url} defaultValue={slvUrlDate} placeholder="datum" />
                </div>
              </div>

              <div>
                <div className={showLA ? add.viewimage : add.hidden}>
                  <img src={slaUrl} />
                  <div className={add.viewimage_date}>
                    <p>Zomer LA</p>
                    <p>{slaUrlDate}</p>
                  </div>
                  <div className={add.viewimage_name}>
                    <p onClick={handleToggleLA}>Edit</p>
                  </div>
                </div>
                <div className={showLA ? add.hidden : add.viewimage}>
                  <div className={add.viewimage_name}>
                    <p onClick={handleToggleLA}>Terug</p>
                  </div>
                  <input {...register("slaName")} className={add.url} defaultValue={slaName} placeholder="Naam" />
                  <input {...register("slaUrl")} className={add.url} defaultValue={slaUrl} placeholder="link afbeelding" />
                  <input {...register("slaUrlDate")} className={add.url} defaultValue={slaUrlDate} placeholder="datum" />
                </div>
              </div>

              <div>
                <div className={showRV ? add.viewimage : add.hidden}>
                  <img src={srvUrl} />
                  <div className={add.viewimage_date}>
                    <p>Zomer RV</p>
                    <p>{slaUrlDate}</p>
                  </div>
                  <div className={add.viewimage_name}>
                    <p onClick={handleToggleRV}>Edit</p>
                  </div>
                </div>
                <div className={showRV ? add.hidden : add.viewimage}>
                  <div className={add.viewimage_name}>
                    <p onClick={handleToggleRV}>Terug</p>
                  </div>
                  <input {...register("srvName")} className={add.url} defaultValue={srvName} placeholder="Naam" />
                  <input {...register("srvUrl")} className={add.url} defaultValue={srvUrl} placeholder="link afbeelding" />
                  <input {...register("srvUrlDate")} className={add.url} defaultValue={srvUrlDate} placeholder="datum" />
                </div>
              </div>

              <div>
                <div className={showRA ? add.viewimage : add.hidden}>
                  <img src={sraUrl} />
                  <div className={add.viewimage_date}>
                    <p>Zomer RA</p>
                    <p>{slaUrlDate}</p>
                  </div>
                  <div className={add.viewimage_name}>
                    <p onClick={handleToggleRA}>Edit</p>
                  </div>
                </div>
                <div className={showRA ? add.hidden : add.viewimage}>
                  <div className={add.viewimage_name}>
                    <p onClick={handleToggleRA}>Terug</p>
                  </div>
                  <input {...register("sraName")} className={add.url} defaultValue={sraName} placeholder="Naam" />
                  <input {...register("sraUrl")} className={add.url} defaultValue={sraUrl} placeholder="link afbeelding" />
                  <input {...register("sraUrlDate")} className={add.url} defaultValue={sraUrlDate} placeholder="datum" />
                </div>
              </div>

            </div>
          </form>
        </div>
      </main>

      <footer className={styles.footer}>
        <p>Â© 2021 - Garage Godefroy x Jaxxpected</p>
      </footer>
    </div>
  );
}

export default Fotodetail

export async function getStaticProps({ params }) {
  const { customer } = await graph.request(
    `
    query Customer($id: ID!) {
      customer(id: $id) {
        id
        name
        slvName
        slvUrl
        slvUrlDate
        slaName
        slaUrl
        slaUrlDate
        srvName
        srvUrl
        srvUrlDate
        sraName
        sraUrl
        sraUrlDate
      }
    }
    `, {
    id: params.id
  }
  )
  return {
    props: {
      customer
    }
  }
}

export async function getStaticPaths() {
  const { customers } = await graph.request(
    `
    {
      customers {
        id
      }
    }
    `
  )
  return {
    paths: customers.map(({ id }) => ({
      params: { id }
    })),
    fallback: false
  }
}